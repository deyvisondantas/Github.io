:source-highlighter: pygments
= Processamento Digital de Imagem
Deyvison Luiz Guedes Dantas <deyvison@ufrn.edu.br>

Olá, eu sou Deyvison, graduando de Engenharia de Computação da Universidade Federal do Rio Grande do Norte - UFRN.

Este site tem como objetivo publicar a resolução de exercícios da disciplina de Processamento Digital de Imagens fazendo uso da biblioteca https://opencv.org/[OpenCV], ministrada pelo professor https://agostinhobritojr.github.io/[Agostinho Brito Júnior].

Os códigos serão desenvolvidos em c++. Para a visualisação do funcionamento dos códigos a seguir é necessário a instalação do OpenCV, que pode ser mais simples se for em linux. Para compilar, usei o arquivo https://agostinhobritojr.github.io/tutorial/pdi/exemplos/Makefile[Makefile], disponibilizado na página do professor.

Vamos aos exercícios...

== Exercícios

== 1. Negativo de uma imagem

Este exercício proprõe que uma área da imagem, delimitada por dois pontos (P1 e P2) informados pelo usuario, tenha o seu negativo exibido. 

Para a execução do algorítmo, em primeiro lugar se obtem as coordenadas dos dos pontos. Após ter posse desses pontos, usa-se os laços for para varrer a região desejada. 

O processamento para tornar a região negativa, consiste em os pixels da região receber seus respectivos valores subtraídos de 255. 

Abaixo a imagem usada e o código desenvolvido.


.sanduiche.png
image::sanduiche.png[sanduiche.png]

.negativo.cpp
[source,c++]
----
include::negativo.cpp[]	
----
Para compilar e executar:

[source,shell]
----
$ make negativo
$ ./negativo

Por favor insira as coordenadas do ponto P1 (x,y)
100
200
Por favor insira as coordenadas do ponto p2 (x,y)
400
400
----

.Saída do programa negativo.cpp
image::negativo.png[negativo.png]


== 2. Troca de regiões

No exercício, é feito a troca de regiões, invertendo diagonalmente os quatros quadrantes da imagem. Para desenvolver esse código, foi feito o uso das funções *Rect* e *copyTo* da classe *Mat*. 

A função *Rect* permite especificar uma região da imagem, passando a coordenada do ponto inicial da imagem (x,y) e o quanto se deseja percorrer em cada eixo a partir do ponto inicial fornecido. 
A função *copyTo* faz uma cópia da imagem, ou de uma região específica dela, para uma outra.

A imagem usada para o exercício foi a mesma do exercício anterior. Abaixo o código desenvolvido.

.trocaregioes.cpp
[source,c++]
----
include::trocaregioes.cpp[]	
----

.Saída do programa negativo.cpp
image::trocaregioes.png[trocaregioes.png]


* 1 - 
* item 2
  ** item 3
     ... item 4
     ... item 5
  ** item 6

//-
[source,c++]

cout << "Hello, World!";
